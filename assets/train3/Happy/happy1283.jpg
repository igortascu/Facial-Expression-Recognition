{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4d8566b0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "57138fa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:/Users/User/Desktop/Folder1/29.jpg\n",
      "False\n",
      "1\n",
      "C:/Users/User/Desktop/Folder2/angry_1.jpg\n",
      "2\n",
      "C:/Users/User/Desktop/Folder2/angry_2.jpg\n",
      "C:/Users/User/Desktop/Folder2/angry_2.jpg\n",
      "C:/Users/User/Desktop/Folder2/angry_2.jpg\n"
     ]
    }
   ],
   "source": [
    "# img_viewer.py\n",
    "\n",
    "import PySimpleGUI as sg\n",
    "import os.path\n",
    "import io\n",
    "from PIL import Image\n",
    "import shutil \n",
    "\n",
    "\n",
    "\n",
    "# First the window layout in 2 columns\n",
    "\n",
    "file_list_column = [\n",
    "    [\n",
    "        sg.Text(\"Image Folder\"),\n",
    "        sg.In(size=(25, 1), enable_events=True, key=\"-FOLDER-\"),\n",
    "        sg.FolderBrowse(),\n",
    "    ],\n",
    "    [\n",
    "        sg.Listbox(\n",
    "            values=[], enable_events=True, size=(40, 20), key=\"-FILE LIST-\"\n",
    "        )\n",
    "    ],\n",
    "]\n",
    "\n",
    "# For now will only show the name of the file that was chosen\n",
    "image_viewer_column = [\n",
    "    [sg.Text(\"Choose an image from list on left:\")],\n",
    "    [sg.Text(size=(40, 1), key=\"-TOUT-\")],\n",
    "    [sg.Image(key=\"-IMAGE-\")],\n",
    "    [sg.Button('Ok', key = \"-MOVE-\")],\n",
    "\n",
    "]\n",
    "\n",
    "# ----- Full layout -----\n",
    "layout = [\n",
    "    [\n",
    "        sg.Column(file_list_column),\n",
    "        sg.VSeperator(),\n",
    "        sg.Column(image_viewer_column),\n",
    "    ]\n",
    "]\n",
    "\n",
    "window = sg.Window(\"Image Viewer\", layout)\n",
    "\n",
    "# Run the Event Loop\n",
    "while True:\n",
    "    event, values = window.read()\n",
    "    if event == \"Exit\" or event == sg.WIN_CLOSED:\n",
    "        break\n",
    "    # Folder name was filled in, make a list of files in the folder\n",
    "    if event == \"-FOLDER-\":\n",
    "        folder = values[\"-FOLDER-\"]\n",
    "        try:\n",
    "            # Get list of files in folder\n",
    "            file_list = os.listdir(folder)\n",
    "        except:\n",
    "            file_list = []\n",
    "\n",
    "        fnames = [\n",
    "            f\n",
    "            for f in file_list\n",
    "            if os.path.isfile(os.path.join(folder, f))\n",
    "            and f.lower().endswith((\".jpg\",\".png\", \".gif\"))\n",
    "        ]\n",
    "        window[\"-FILE LIST-\"].update(fnames)\n",
    "    elif event == \"-FILE LIST-\":  # A file was chosen from the listbox\n",
    "        try:\n",
    "            filename = os.path.join(\n",
    "                values[\"-FOLDER-\"], values[\"-FILE LIST-\"][0]\n",
    "            )\n",
    "            \n",
    "#             image = Image.open(values[\"-FILE-\"])\n",
    "            image = Image.open(filename)\n",
    "            image.thumbnail((400, 400))\n",
    "            bio = io.BytesIO()\n",
    "            image.save(bio, format=\"PNG\")\n",
    "#             window[\"-IMAGE-\"].update(data=bio.getvalue())\n",
    "            \n",
    "            window[\"-TOUT-\"].update(filename)\n",
    "            \n",
    "            window[\"-IMAGE-\"].update(data=bio.getvalue())\n",
    "#             window[\"-IMAGE-\"].update(filename=filename)\n",
    "\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    elif event == \"-MOVE-\":\n",
    "        try:\n",
    "            filename = os.path.join(\n",
    "                values[\"-FOLDER-\"], values[\"-FILE LIST-\"][0]\n",
    "            )\n",
    "            source = filename.replace(\"\\\\\",\"/\")\n",
    "            print(source)\n",
    "            i = 0 \n",
    "            path=\"\"\n",
    "            destination =\"\"\n",
    "            flag = False\n",
    "            \n",
    "            while (flag == False):\n",
    "                i = i + 1\n",
    "                print(i)\n",
    "                path = \"C:/Users/User/Desktop/Folder2/angry_\" + str(i) + \".jpg\"\n",
    "                print(path)\n",
    "                if (os.path.exists(path) == False):\n",
    "                    destination = path\n",
    "                    flag = True\n",
    "            \n",
    "            dest = shutil.move(source, destination)\n",
    "            \n",
    "            \n",
    "        except:\n",
    "            pass\n",
    "            \n",
    "window.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1bd1760e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#             folder = values[\"-FOLDER-\"]\n",
    "#             try:\n",
    "#                 # Get list of files in folder\n",
    "#                 file_list = os.listdir(folder)\n",
    "#             except:\n",
    "#                 file_list = []\n",
    "\n",
    "#             fnames = [\n",
    "#                 f\n",
    "#                 for f in file_list\n",
    "#                 if os.path.isfile(os.path.join(folder, f))\n",
    "#                 and f.lower().endswith((\".jpg\",\".png\", \".gif\"))\n",
    "#             ]\n",
    "            \n",
    "#             fnames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "190c79c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bf64c04",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
